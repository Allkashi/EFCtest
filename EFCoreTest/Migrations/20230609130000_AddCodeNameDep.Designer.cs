// <auto-generated />
using System;
using EFCoreTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreTest.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20230609130000_AddCodeNameDep")]
    partial class AddCodeNameDep
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("EFCoreTest.Department", b =>
                {
                    b.Property<int>("DepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("DEP_ID")
                        .HasComment("Идентификатор отдела");

                    b.Property<string>("CodeDepName")
                        .HasColumnType("longtext");

                    b.Property<string>("DepName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("DEP_NAME")
                        .HasComment("Наименование отдела");

                    b.HasKey("DepId")
                        .HasName("PRIMARY");

                    b.ToTable("department", null, t =>
                        {
                            t.HasComment("Отдел");
                        });

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "cp1251");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "cp1251_general_ci");
                });

            modelBuilder.Entity("EFCoreTest.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("EMP_ID")
                        .HasComment("Идентификатор сотрудника");

                    b.Property<int?>("Bonus")
                        .HasColumnType("int(11)")
                        .HasColumnName("BONUS")
                        .HasComment("Размер премии (%)");

                    b.Property<DateOnly?>("DateIn")
                        .HasColumnType("date")
                        .HasColumnName("DATE_IN")
                        .HasComment("Дата трудоустройства");

                    b.Property<int?>("DepId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DEP_ID")
                        .HasComment("Идентификатор отдела");

                    b.Property<string>("EmpName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EMP_NAME")
                        .HasComment("ФИО сотрудника");

                    b.Property<int?>("JobId")
                        .HasColumnType("int(11)")
                        .HasColumnName("JOB_ID")
                        .HasComment("Идентификатор должности");

                    b.Property<int?>("Manager")
                        .HasColumnType("int(11)")
                        .HasColumnName("MANAGER")
                        .HasComment("Начальник сотрудника");

                    b.HasKey("EmpId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobId" }, "employee_ibfk_1");

                    b.HasIndex(new[] { "DepId" }, "employee_ibfk_2");

                    b.HasIndex(new[] { "Manager" }, "employee_ibfk_3");

                    b.ToTable("employee", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "cp1251");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "cp1251_general_ci");
                });

            modelBuilder.Entity("EFCoreTest.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("JOB_ID")
                        .HasComment("Идентификатор должности");

                    b.Property<string>("PosName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("POS_NAME")
                        .HasComment("Наименование должности");

                    b.Property<int?>("Salary")
                        .HasColumnType("int(11)")
                        .HasColumnName("SALARY")
                        .HasComment("Зарплата");

                    b.HasKey("JobId")
                        .HasName("PRIMARY");

                    b.ToTable("job", null, t =>
                        {
                            t.HasComment("Должность");
                        });

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "cp1251");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "cp1251_general_ci");
                });

            modelBuilder.Entity("EFCoreTest.Employee", b =>
                {
                    b.HasOne("EFCoreTest.Department", "Dep")
                        .WithMany("Employees")
                        .HasForeignKey("DepId")
                        .HasConstraintName("employee_ibfk_2");

                    b.HasOne("EFCoreTest.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .HasConstraintName("employee_ibfk_1");

                    b.HasOne("EFCoreTest.Employee", "ManagerNavigation")
                        .WithMany("InverseManagerNavigation")
                        .HasForeignKey("Manager")
                        .HasConstraintName("employee_ibfk_3");

                    b.Navigation("Dep");

                    b.Navigation("Job");

                    b.Navigation("ManagerNavigation");
                });

            modelBuilder.Entity("EFCoreTest.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCoreTest.Employee", b =>
                {
                    b.Navigation("InverseManagerNavigation");
                });

            modelBuilder.Entity("EFCoreTest.Job", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
